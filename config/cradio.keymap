/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
        

        
    };

    behaviours {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	    td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp F &kp P      &kp G 					&kp J &kp L &kp U &kp Y &kp BSPC 
		&kp A &kp R &kp S &hm LGUI T &kp D 			        &kp H &hm RGUI N &kp E &kp I &kp O
		&kp Z &kp X &kp C &kp V      &kp B			        &kp K &kp M &mt MINUS COMMA &mt EXCL DOT &mt UNDER SLASH
          			&kp LSHIFT &mt LALT SPACE  		        &mt RCTRL SPACE &to 1 
		>;
		};

       		left_layer {
		bindings = <
		&kp ESC   &kp AT        &kp HASH &kp DOLLAR &kp PERCENT	    &kp CARET &kp AMPS  &kp STAR &mt COLON SEMI &trans 
		&kp TAB   &mt PLUS EQUAL &kp QMARK &kp PIPE2  &kp SQT 	    &mt HOME BSLH  &kp LBRC  &kp RBRC &mt END PIPE &kp ENTER 
		&kp TILDE &kp RA(E)     &kp LT   &kp GT     &kp DQT     	&kp LBKT  &kp LPAR  &kp RPAR &kp RBKT &to 2 
					                        &to 0  &kp LSHIFT		&kp RGUI &to 3 
		>;
		};
		
		right_layer {
		bindings = <
		&kp ESC   &none    &none    &none    &none    		&kp C_AC_BACK  &none    &none    &kp C_AC_FORWARD &trans 
		&kp TAB   &none    &none    &none    &kp DEL 		&kp LEFT       &kp DOWN &kp UP   &kp RIGHT        &kp ENTER
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT &kp BSLH    	&none          &none    &none    &none            &none
					                &to 0    &kp LCTL  		&kp RALT       &to 1 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp ESC  &kp C_PLAY_PAUSE &kp C_PREV   &kp C_NEXT   &kp UNDER 	&kp MINUS &kp NUM_7  &kp NUM_8 &kp NUM_9  &trans
		&kp TAB  &kp SLASH        &kp C_VOL_UP &kp C_VOL_DN &kp PLUS  	&kp EQUAL &kp NUM_4 &kp NUM_5 &kp NUM_6 &kp ENTER 
		&bt BT_CLR  &bt BT_NXT    &bt BT_PRV   &none &kp DOT   			&kp NUM_0 &kp NUM_1  &kp NUM_2  &kp NUM_3 &to 2 
					                            &to 0 &trans  			&kp RALT &to 1 
		>;
		};	
        
	};
};
